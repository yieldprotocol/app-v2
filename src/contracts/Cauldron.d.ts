/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface CauldronInterface extends ethers.utils.Interface {
  functions: {
    'LOCK()': FunctionFragment;
    'ROOT()': FunctionFragment;
    'accrual(bytes6)': FunctionFragment;
    'addAsset(bytes6,address)': FunctionFragment;
    'addIlks(bytes6,bytes6[])': FunctionFragment;
    'addSeries(bytes6,bytes6,address)': FunctionFragment;
    'assets(bytes6)': FunctionFragment;
    'auctionInterval()': FunctionFragment;
    'auctions(bytes12)': FunctionFragment;
    'balances(bytes12)': FunctionFragment;
    'build(address,bytes12,bytes6,bytes6)': FunctionFragment;
    'debt(bytes6,bytes6)': FunctionFragment;
    'destroy(bytes12)': FunctionFragment;
    'getRoleAdmin(bytes4)': FunctionFragment;
    'give(bytes12,address)': FunctionFragment;
    'grab(bytes12,address)': FunctionFragment;
    'grantRole(bytes4,address)': FunctionFragment;
    'grantRoles(bytes4[],address)': FunctionFragment;
    'hasRole(bytes4,address)': FunctionFragment;
    'ilks(bytes6,bytes6)': FunctionFragment;
    'level(bytes12)': FunctionFragment;
    'lockRole(bytes4)': FunctionFragment;
    'mature(bytes6)': FunctionFragment;
    'pour(bytes12,int128,int128)': FunctionFragment;
    'rateOracles(bytes6)': FunctionFragment;
    'ratesAtMaturity(bytes6)': FunctionFragment;
    'renounceRole(bytes4,address)': FunctionFragment;
    'revokeRole(bytes4,address)': FunctionFragment;
    'revokeRoles(bytes4[],address)': FunctionFragment;
    'roll(bytes12,bytes6,int128)': FunctionFragment;
    'series(bytes6)': FunctionFragment;
    'setAuctionInterval(uint32)': FunctionFragment;
    'setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)': FunctionFragment;
    'setRateOracle(bytes6,address)': FunctionFragment;
    'setRoleAdmin(bytes4,bytes4)': FunctionFragment;
    'setSpotOracle(bytes6,bytes6,address,uint32)': FunctionFragment;
    'slurp(bytes12,uint128,uint128)': FunctionFragment;
    'spotOracles(bytes6,bytes6)': FunctionFragment;
    'stir(bytes12,bytes12,uint128,uint128)': FunctionFragment;
    'tweak(bytes12,bytes6,bytes6)': FunctionFragment;
    'vaults(bytes12)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'LOCK', values?: undefined): string;
  encodeFunctionData(functionFragment: 'ROOT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'accrual', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'addAsset', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'addIlks', values: [BytesLike, BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'addSeries', values: [BytesLike, BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'assets', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'auctionInterval', values?: undefined): string;
  encodeFunctionData(functionFragment: 'auctions', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'balances', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'build', values: [string, BytesLike, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'debt', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'destroy', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'give', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'grab', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'grantRoles', values: [BytesLike[], string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'ilks', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'level', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'lockRole', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'mature', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'pour', values: [BytesLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'rateOracles', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'ratesAtMaturity', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRoles', values: [BytesLike[], string]): string;
  encodeFunctionData(functionFragment: 'roll', values: [BytesLike, BytesLike, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'series', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'setAuctionInterval', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'setDebtLimits',
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setRateOracle', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'setRoleAdmin', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'setSpotOracle', values: [BytesLike, BytesLike, string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'slurp', values: [BytesLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'spotOracles', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'stir', values: [BytesLike, BytesLike, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'tweak', values: [BytesLike, BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: 'vaults', values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: 'LOCK', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ROOT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'accrual', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addIlks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSeries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'auctionInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'auctions', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balances', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'build', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'debt', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'destroy', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'give', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grab', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ilks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'level', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lockRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mature', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pour', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rateOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'ratesAtMaturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'roll', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'series', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuctionInterval', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebtLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRateOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSpotOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'slurp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'spotOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stir', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tweak', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'vaults', data: BytesLike): Result;

  events: {
    'AssetAdded(bytes6,address)': EventFragment;
    'AuctionIntervalSet(uint32)': EventFragment;
    'DebtLimitsSet(bytes6,bytes6,uint96,uint24,uint8)': EventFragment;
    'IlkAdded(bytes6,bytes6)': EventFragment;
    'RateOracleAdded(bytes6,address)': EventFragment;
    'RoleAdminChanged(bytes4,bytes4)': EventFragment;
    'RoleGranted(bytes4,address,address)': EventFragment;
    'RoleRevoked(bytes4,address,address)': EventFragment;
    'SeriesAdded(bytes6,bytes6,address)': EventFragment;
    'SeriesMatured(bytes6,uint256)': EventFragment;
    'SpotOracleAdded(bytes6,bytes6,address,uint32)': EventFragment;
    'VaultBuilt(bytes12,address,bytes6,bytes6)': EventFragment;
    'VaultDestroyed(bytes12)': EventFragment;
    'VaultGiven(bytes12,address)': EventFragment;
    'VaultLocked(bytes12,uint256)': EventFragment;
    'VaultPoured(bytes12,bytes6,bytes6,int128,int128)': EventFragment;
    'VaultRolled(bytes12,bytes6,uint128)': EventFragment;
    'VaultStirred(bytes12,bytes12,uint128,uint128)': EventFragment;
    'VaultTweaked(bytes12,bytes6,bytes6)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssetAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuctionIntervalSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DebtLimitsSet'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'IlkAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RateOracleAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SeriesAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SeriesMatured'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SpotOracleAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultBuilt'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultDestroyed'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultGiven'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultLocked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultPoured'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultRolled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultStirred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'VaultTweaked'): EventFragment;
}

export class Cauldron extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CauldronInterface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    accrual(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addAsset(
      assetId: BytesLike,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIlks(
      seriesId: BytesLike,
      ilkIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeries(
      seriesId: BytesLike,
      baseId: BytesLike,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    auctionInterval(overrides?: CallOverrides): Promise<[number]>;

    auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<[number]>;

    balances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    debt(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, BigNumber] & {
        max: BigNumber;
        min: number;
        dec: number;
        sum: BigNumber;
      }
    >;

    destroy(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grab(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    ilks(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    level(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mature(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    ratesAtMaturity(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roll(
      vaultId: BytesLike,
      newSeriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    setAuctionInterval(
      auctionInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDebtLimits(
      baseId: BytesLike,
      ilkId: BytesLike,
      max: BigNumberish,
      min: BigNumberish,
      dec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRateOracle(
      baseId: BytesLike,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpotOracle(
      baseId: BytesLike,
      ilkId: BytesLike,
      oracle: string,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    spotOracles(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { oracle: string; ratio: number }>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vaults(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  accrual(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addAsset(
    assetId: BytesLike,
    asset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIlks(
    seriesId: BytesLike,
    ilkIds: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeries(
    seriesId: BytesLike,
    baseId: BytesLike,
    fyToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  auctionInterval(overrides?: CallOverrides): Promise<number>;

  auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

  balances(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

  build(
    owner: string,
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  debt(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, BigNumber] & {
      max: BigNumber;
      min: number;
      dec: number;
      sum: BigNumber;
    }
  >;

  destroy(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  give(
    vaultId: BytesLike,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grab(
    vaultId: BytesLike,
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  ilks(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  level(vaultId: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  lockRole(role: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  mature(
    seriesId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pour(
    vaultId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  ratesAtMaturity(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roll(
    vaultId: BytesLike,
    newSeriesId: BytesLike,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  setAuctionInterval(
    auctionInterval_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDebtLimits(
    baseId: BytesLike,
    ilkId: BytesLike,
    max: BigNumberish,
    min: BigNumberish,
    dec: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRateOracle(
    baseId: BytesLike,
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpotOracle(
    baseId: BytesLike,
    ilkId: BytesLike,
    oracle: string,
    ratio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  slurp(
    vaultId: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  spotOracles(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, number] & { oracle: string; ratio: number }>;

  stir(
    from: BytesLike,
    to: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tweak(
    vaultId: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vaults(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string] & {
      owner: string;
      seriesId: string;
      ilkId: string;
    }
  >;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    accrual(seriesId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    addAsset(assetId: BytesLike, asset: string, overrides?: CallOverrides): Promise<void>;

    addIlks(seriesId: BytesLike, ilkIds: BytesLike[], overrides?: CallOverrides): Promise<void>;

    addSeries(seriesId: BytesLike, baseId: BytesLike, fyToken: string, overrides?: CallOverrides): Promise<void>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    auctionInterval(overrides?: CallOverrides): Promise<number>;

    auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<number>;

    balances(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;

    debt(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, BigNumber] & {
        max: BigNumber;
        min: number;
        dec: number;
        sum: BigNumber;
      }
    >;

    destroy(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;

    grab(vaultId: BytesLike, receiver: string, overrides?: CallOverrides): Promise<void>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    grantRoles(roles: BytesLike[], account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    ilks(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    level(vaultId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    mature(seriesId: BytesLike, overrides?: CallOverrides): Promise<void>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    ratesAtMaturity(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    revokeRoles(roles: BytesLike[], account: string, overrides?: CallOverrides): Promise<void>;

    roll(
      vaultId: BytesLike,
      newSeriesId: BytesLike,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        },
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }
      ]
    >;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    setAuctionInterval(auctionInterval_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDebtLimits(
      baseId: BytesLike,
      ilkId: BytesLike,
      max: BigNumberish,
      min: BigNumberish,
      dec: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateOracle(baseId: BytesLike, oracle: string, overrides?: CallOverrides): Promise<void>;

    setRoleAdmin(role: BytesLike, adminRole: BytesLike, overrides?: CallOverrides): Promise<void>;

    setSpotOracle(
      baseId: BytesLike,
      ilkId: BytesLike,
      oracle: string,
      ratio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }>;

    spotOracles(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, number] & { oracle: string; ratio: number }>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber },
        [BigNumber, BigNumber] & { art: BigNumber; ink: BigNumber }
      ]
    >;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;

    vaults(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;
  };

  filters: {
    AssetAdded(
      assetId?: BytesLike | null,
      asset?: string | null
    ): TypedEventFilter<[string, string], { assetId: string; asset: string }>;

    AuctionIntervalSet(auctionInterval?: BigNumberish | null): TypedEventFilter<[number], { auctionInterval: number }>;

    DebtLimitsSet(
      baseId?: BytesLike | null,
      ilkId?: BytesLike | null,
      max?: null,
      min?: null,
      dec?: null
    ): TypedEventFilter<
      [string, string, BigNumber, number, number],
      {
        baseId: string;
        ilkId: string;
        max: BigNumber;
        min: number;
        dec: number;
      }
    >;

    IlkAdded(
      seriesId?: BytesLike | null,
      ilkId?: BytesLike | null
    ): TypedEventFilter<[string, string], { seriesId: string; ilkId: string }>;

    RateOracleAdded(
      baseId?: BytesLike | null,
      oracle?: string | null
    ): TypedEventFilter<[string, string], { baseId: string; oracle: string }>;

    RoleAdminChanged(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<[string, string], { role: string; newAdminRole: string }>;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<[string, string, string], { role: string; account: string; sender: string }>;

    SeriesAdded(
      seriesId?: BytesLike | null,
      baseId?: BytesLike | null,
      fyToken?: string | null
    ): TypedEventFilter<[string, string, string], { seriesId: string; baseId: string; fyToken: string }>;

    SeriesMatured(
      seriesId?: BytesLike | null,
      rateAtMaturity?: null
    ): TypedEventFilter<[string, BigNumber], { seriesId: string; rateAtMaturity: BigNumber }>;

    SpotOracleAdded(
      baseId?: BytesLike | null,
      ilkId?: BytesLike | null,
      oracle?: string | null,
      ratio?: null
    ): TypedEventFilter<
      [string, string, string, number],
      { baseId: string; ilkId: string; oracle: string; ratio: number }
    >;

    VaultBuilt(
      vaultId?: BytesLike | null,
      owner?: string | null,
      seriesId?: BytesLike | null,
      ilkId?: null
    ): TypedEventFilter<
      [string, string, string, string],
      { vaultId: string; owner: string; seriesId: string; ilkId: string }
    >;

    VaultDestroyed(vaultId?: BytesLike | null): TypedEventFilter<[string], { vaultId: string }>;

    VaultGiven(
      vaultId?: BytesLike | null,
      receiver?: string | null
    ): TypedEventFilter<[string, string], { vaultId: string; receiver: string }>;

    VaultLocked(
      vaultId?: BytesLike | null,
      timestamp?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { vaultId: string; timestamp: BigNumber }>;

    VaultPoured(
      vaultId?: BytesLike | null,
      seriesId?: BytesLike | null,
      ilkId?: BytesLike | null,
      ink?: null,
      art?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        vaultId: string;
        seriesId: string;
        ilkId: string;
        ink: BigNumber;
        art: BigNumber;
      }
    >;

    VaultRolled(
      vaultId?: BytesLike | null,
      seriesId?: BytesLike | null,
      art?: null
    ): TypedEventFilter<[string, string, BigNumber], { vaultId: string; seriesId: string; art: BigNumber }>;

    VaultStirred(
      from?: BytesLike | null,
      to?: BytesLike | null,
      ink?: null,
      art?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { from: string; to: string; ink: BigNumber; art: BigNumber }
    >;

    VaultTweaked(
      vaultId?: BytesLike | null,
      seriesId?: BytesLike | null,
      ilkId?: BytesLike | null
    ): TypedEventFilter<[string, string, string], { vaultId: string; seriesId: string; ilkId: string }>;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    accrual(seriesId: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addAsset(
      assetId: BytesLike,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIlks(
      seriesId: BytesLike,
      ilkIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeries(
      seriesId: BytesLike,
      baseId: BytesLike,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    auctionInterval(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    balances(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    debt(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    destroy(vaultId: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grab(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    ilks(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    level(vaultId: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    lockRole(role: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    mature(seriesId: BytesLike, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    ratesAtMaturity(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roll(
      vaultId: BytesLike,
      newSeriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setAuctionInterval(
      auctionInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDebtLimits(
      baseId: BytesLike,
      ilkId: BytesLike,
      max: BigNumberish,
      min: BigNumberish,
      dec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRateOracle(
      baseId: BytesLike,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpotOracle(
      baseId: BytesLike,
      ilkId: BytesLike,
      oracle: string,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    spotOracles(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vaults(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accrual(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addAsset(
      assetId: BytesLike,
      asset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIlks(
      seriesId: BytesLike,
      ilkIds: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeries(
      seriesId: BytesLike,
      baseId: BytesLike,
      fyToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balances(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    build(
      owner: string,
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    debt(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    destroy(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    give(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grab(
      vaultId: BytesLike,
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ilks(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    level(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mature(
      seriesId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ratesAtMaturity(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roll(
      vaultId: BytesLike,
      newSeriesId: BytesLike,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAuctionInterval(
      auctionInterval_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDebtLimits(
      baseId: BytesLike,
      ilkId: BytesLike,
      max: BigNumberish,
      min: BigNumberish,
      dec: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRateOracle(
      baseId: BytesLike,
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpotOracle(
      baseId: BytesLike,
      ilkId: BytesLike,
      oracle: string,
      ratio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    slurp(
      vaultId: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    spotOracles(arg0: BytesLike, arg1: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tweak(
      vaultId: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vaults(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
