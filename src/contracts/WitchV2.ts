/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace DataTypes {
  export type AuctionStruct = {
    owner: PromiseOrValue<string>;
    start: PromiseOrValue<BigNumberish>;
    baseId: PromiseOrValue<BytesLike>;
    ink: PromiseOrValue<BigNumberish>;
    art: PromiseOrValue<BigNumberish>;
    auctioneer: PromiseOrValue<string>;
    ilkId: PromiseOrValue<BytesLike>;
    seriesId: PromiseOrValue<BytesLike>;
  };

  export type AuctionStructOutput = [
    string,
    number,
    string,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    owner: string;
    start: number;
    baseId: string;
    ink: BigNumber;
    art: BigNumber;
    auctioneer: string;
    ilkId: string;
    seriesId: string;
  };

  export type VaultStruct = {
    owner: PromiseOrValue<string>;
    seriesId: PromiseOrValue<BytesLike>;
    ilkId: PromiseOrValue<BytesLike>;
  };

  export type VaultStructOutput = [string, string, string] & {
    owner: string;
    seriesId: string;
    ilkId: string;
  };

  export type SeriesStruct = {
    fyToken: PromiseOrValue<string>;
    baseId: PromiseOrValue<BytesLike>;
    maturity: PromiseOrValue<BigNumberish>;
  };

  export type SeriesStructOutput = [string, string, number] & {
    fyToken: string;
    baseId: string;
    maturity: number;
  };
}

export interface WitchV2Interface extends utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "LOCK8605463013()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "ONE_PERCENT()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "ROOT4146650865()": FunctionFragment;
    "auction(bytes12,address)": FunctionFragment;
    "auctioneerReward()": FunctionFragment;
    "auctions(bytes12)": FunctionFragment;
    "calcPayout(bytes12,address,uint256)": FunctionFragment;
    "cancel(bytes12)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "clear(bytes12)": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "ladle()": FunctionFragment;
    "limits(bytes6,bytes6)": FunctionFragment;
    "lines(bytes6,bytes6)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "payBase(bytes12,address,uint128,uint128)": FunctionFragment;
    "payFYToken(bytes12,address,uint128,uint128)": FunctionFragment;
    "point(bytes32,address)": FunctionFragment;
    "protected(address)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "setAuctioneerReward(uint256)": FunctionFragment;
    "setLineAndLimit(bytes6,bytes6,uint32,uint64,uint64,uint128)": FunctionFragment;
    "setProtected(address,bool)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LOCK"
      | "LOCK8605463013"
      | "ONE_HUNDRED_PERCENT"
      | "ONE_PERCENT"
      | "ROOT"
      | "ROOT4146650865"
      | "auction"
      | "auctioneerReward"
      | "auctions"
      | "calcPayout"
      | "cancel"
      | "cauldron"
      | "clear"
      | "getRoleAdmin"
      | "grantRole"
      | "grantRoles"
      | "hasRole"
      | "ladle"
      | "limits"
      | "lines"
      | "lockRole"
      | "payBase"
      | "payFYToken"
      | "point"
      | "protected"
      | "renounceRole"
      | "revokeRole"
      | "revokeRoles"
      | "setAuctioneerReward"
      | "setLineAndLimit"
      | "setProtected"
      | "setRoleAdmin"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK8605463013",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOT4146650865",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auction",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneerReward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctions",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "calcPayout",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "cancel",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "clear",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limits",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lines",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockRole",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "payBase",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "payFYToken",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "point",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "protected",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctioneerReward",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setLineAndLimit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtected",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK8605463013",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT4146650865",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctioneerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "limits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFYToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "point", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protected", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctioneerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLineAndLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;

  events: {
    "Auctioned(bytes12,tuple,uint256,uint256)": EventFragment;
    "AuctioneerRewardSet(uint256)": EventFragment;
    "Bought(bytes12,address,uint256,uint256)": EventFragment;
    "Cancelled(bytes12)": EventFragment;
    "Cleared(bytes12)": EventFragment;
    "Ended(bytes12)": EventFragment;
    "LimitSet(bytes6,bytes6,uint128)": EventFragment;
    "LineSet(bytes6,bytes6,uint32,uint64,uint64)": EventFragment;
    "Point(bytes32,address,address)": EventFragment;
    "ProtectedSet(address,bool)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Auctioned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctioneerRewardSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LineSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Point"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export interface AuctionedEventObject {
  vaultId: string;
  auction: DataTypes.AuctionStructOutput;
  duration: BigNumber;
  initialCollateralProportion: BigNumber;
}
export type AuctionedEvent = TypedEvent<
  [string, DataTypes.AuctionStructOutput, BigNumber, BigNumber],
  AuctionedEventObject
>;

export type AuctionedEventFilter = TypedEventFilter<AuctionedEvent>;

export interface AuctioneerRewardSetEventObject {
  auctioneerReward: BigNumber;
}
export type AuctioneerRewardSetEvent = TypedEvent<
  [BigNumber],
  AuctioneerRewardSetEventObject
>;

export type AuctioneerRewardSetEventFilter =
  TypedEventFilter<AuctioneerRewardSetEvent>;

export interface BoughtEventObject {
  vaultId: string;
  buyer: string;
  ink: BigNumber;
  art: BigNumber;
}
export type BoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  BoughtEventObject
>;

export type BoughtEventFilter = TypedEventFilter<BoughtEvent>;

export interface CancelledEventObject {
  vaultId: string;
}
export type CancelledEvent = TypedEvent<[string], CancelledEventObject>;

export type CancelledEventFilter = TypedEventFilter<CancelledEvent>;

export interface ClearedEventObject {
  vaultId: string;
}
export type ClearedEvent = TypedEvent<[string], ClearedEventObject>;

export type ClearedEventFilter = TypedEventFilter<ClearedEvent>;

export interface EndedEventObject {
  vaultId: string;
}
export type EndedEvent = TypedEvent<[string], EndedEventObject>;

export type EndedEventFilter = TypedEventFilter<EndedEvent>;

export interface LimitSetEventObject {
  ilkId: string;
  baseId: string;
  max: BigNumber;
}
export type LimitSetEvent = TypedEvent<
  [string, string, BigNumber],
  LimitSetEventObject
>;

export type LimitSetEventFilter = TypedEventFilter<LimitSetEvent>;

export interface LineSetEventObject {
  ilkId: string;
  baseId: string;
  duration: number;
  vaultProportion: BigNumber;
  collateralProportion: BigNumber;
}
export type LineSetEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber],
  LineSetEventObject
>;

export type LineSetEventFilter = TypedEventFilter<LineSetEvent>;

export interface PointEventObject {
  param: string;
  oldValue: string;
  newValue: string;
}
export type PointEvent = TypedEvent<[string, string, string], PointEventObject>;

export type PointEventFilter = TypedEventFilter<PointEvent>;

export interface ProtectedSetEventObject {
  value: string;
  protected: boolean;
}
export type ProtectedSetEvent = TypedEvent<
  [string, boolean],
  ProtectedSetEventObject
>;

export type ProtectedSetEventFilter = TypedEventFilter<ProtectedSetEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface WitchV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WitchV2Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    LOCK8605463013(overrides?: CallOverrides): Promise<[string]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    ROOT4146650865(overrides?: CallOverrides): Promise<[string]>;

    auction(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    auctioneerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber, string, string, string] & {
        owner: string;
        start: number;
        baseId: string;
        ink: BigNumber;
        art: BigNumber;
        auctioneer: string;
        ilkId: string;
        seriesId: string;
      }
    >;

    calcPayout(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    cancel(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    clear(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    limits(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

    lines(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    lockRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payBase(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxBaseIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    payFYToken(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    point(
      param: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    protected(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAuctioneerReward(
      auctioneerReward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setLineAndLimit(
      ilkId: PromiseOrValue<BytesLike>,
      baseId: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      vaultProportion: PromiseOrValue<BigNumberish>,
      collateralProportion: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProtected(
      owner: PromiseOrValue<string>,
      _protected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  LOCK8605463013(overrides?: CallOverrides): Promise<string>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  ROOT4146650865(overrides?: CallOverrides): Promise<string>;

  auction(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber, string, string, string] & {
      owner: string;
      start: number;
      baseId: string;
      ink: BigNumber;
      art: BigNumber;
      auctioneer: string;
      ilkId: string;
      seriesId: string;
    }
  >;

  calcPayout(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    maxArtIn: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidatorCut: BigNumber;
      auctioneerCut: BigNumber;
      artIn: BigNumber;
    }
  >;

  cancel(
    vaultId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  clear(
    vaultId: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: PromiseOrValue<BytesLike>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ladle(overrides?: CallOverrides): Promise<string>;

  limits(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

  lines(
    arg0: PromiseOrValue<BytesLike>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      duration: number;
      vaultProportion: BigNumber;
      collateralProportion: BigNumber;
    }
  >;

  lockRole(
    role: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payBase(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    minInkOut: PromiseOrValue<BigNumberish>,
    maxBaseIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  payFYToken(
    vaultId: PromiseOrValue<BytesLike>,
    to: PromiseOrValue<string>,
    minInkOut: PromiseOrValue<BigNumberish>,
    maxArtIn: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  point(
    param: PromiseOrValue<BytesLike>,
    value: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  protected(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: PromiseOrValue<BytesLike>[],
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAuctioneerReward(
    auctioneerReward_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setLineAndLimit(
    ilkId: PromiseOrValue<BytesLike>,
    baseId: PromiseOrValue<BytesLike>,
    duration: PromiseOrValue<BigNumberish>,
    vaultProportion: PromiseOrValue<BigNumberish>,
    collateralProportion: PromiseOrValue<BigNumberish>,
    max: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProtected(
    owner: PromiseOrValue<string>,
    _protected: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    adminRole: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    LOCK8605463013(overrides?: CallOverrides): Promise<string>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    ROOT4146650865(overrides?: CallOverrides): Promise<string>;

    auction(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        DataTypes.AuctionStructOutput,
        DataTypes.VaultStructOutput,
        DataTypes.SeriesStructOutput
      ] & {
        auction_: DataTypes.AuctionStructOutput;
        vault: DataTypes.VaultStructOutput;
        series: DataTypes.SeriesStructOutput;
      }
    >;

    auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber, string, string, string] & {
        owner: string;
        start: number;
        baseId: string;
        ink: BigNumber;
        art: BigNumber;
        auctioneer: string;
        ilkId: string;
        seriesId: string;
      }
    >;

    calcPayout(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    cancel(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    clear(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ladle(overrides?: CallOverrides): Promise<string>;

    limits(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

    lines(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    lockRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    payBase(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxBaseIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        baseIn: BigNumber;
      }
    >;

    payFYToken(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    point(
      param: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    protected(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctioneerReward(
      auctioneerReward_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setLineAndLimit(
      ilkId: PromiseOrValue<BytesLike>,
      baseId: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      vaultProportion: PromiseOrValue<BigNumberish>,
      collateralProportion: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtected(
      owner: PromiseOrValue<string>,
      _protected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Auctioned(bytes12,tuple,uint256,uint256)"(
      vaultId?: PromiseOrValue<BytesLike> | null,
      auction?: null,
      duration?: null,
      initialCollateralProportion?: null
    ): AuctionedEventFilter;
    Auctioned(
      vaultId?: PromiseOrValue<BytesLike> | null,
      auction?: null,
      duration?: null,
      initialCollateralProportion?: null
    ): AuctionedEventFilter;

    "AuctioneerRewardSet(uint256)"(
      auctioneerReward?: null
    ): AuctioneerRewardSetEventFilter;
    AuctioneerRewardSet(
      auctioneerReward?: null
    ): AuctioneerRewardSetEventFilter;

    "Bought(bytes12,address,uint256,uint256)"(
      vaultId?: PromiseOrValue<BytesLike> | null,
      buyer?: PromiseOrValue<string> | null,
      ink?: null,
      art?: null
    ): BoughtEventFilter;
    Bought(
      vaultId?: PromiseOrValue<BytesLike> | null,
      buyer?: PromiseOrValue<string> | null,
      ink?: null,
      art?: null
    ): BoughtEventFilter;

    "Cancelled(bytes12)"(
      vaultId?: PromiseOrValue<BytesLike> | null
    ): CancelledEventFilter;
    Cancelled(vaultId?: PromiseOrValue<BytesLike> | null): CancelledEventFilter;

    "Cleared(bytes12)"(
      vaultId?: PromiseOrValue<BytesLike> | null
    ): ClearedEventFilter;
    Cleared(vaultId?: PromiseOrValue<BytesLike> | null): ClearedEventFilter;

    "Ended(bytes12)"(
      vaultId?: PromiseOrValue<BytesLike> | null
    ): EndedEventFilter;
    Ended(vaultId?: PromiseOrValue<BytesLike> | null): EndedEventFilter;

    "LimitSet(bytes6,bytes6,uint128)"(
      ilkId?: PromiseOrValue<BytesLike> | null,
      baseId?: PromiseOrValue<BytesLike> | null,
      max?: null
    ): LimitSetEventFilter;
    LimitSet(
      ilkId?: PromiseOrValue<BytesLike> | null,
      baseId?: PromiseOrValue<BytesLike> | null,
      max?: null
    ): LimitSetEventFilter;

    "LineSet(bytes6,bytes6,uint32,uint64,uint64)"(
      ilkId?: PromiseOrValue<BytesLike> | null,
      baseId?: PromiseOrValue<BytesLike> | null,
      duration?: null,
      vaultProportion?: null,
      collateralProportion?: null
    ): LineSetEventFilter;
    LineSet(
      ilkId?: PromiseOrValue<BytesLike> | null,
      baseId?: PromiseOrValue<BytesLike> | null,
      duration?: null,
      vaultProportion?: null,
      collateralProportion?: null
    ): LineSetEventFilter;

    "Point(bytes32,address,address)"(
      param?: PromiseOrValue<BytesLike> | null,
      oldValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): PointEventFilter;
    Point(
      param?: PromiseOrValue<BytesLike> | null,
      oldValue?: PromiseOrValue<string> | null,
      newValue?: PromiseOrValue<string> | null
    ): PointEventFilter;

    "ProtectedSet(address,bool)"(
      value?: PromiseOrValue<string> | null,
      protected?: null
    ): ProtectedSetEventFilter;
    ProtectedSet(
      value?: PromiseOrValue<string> | null,
      protected?: null
    ): ProtectedSetEventFilter;

    "RoleAdminChanged(bytes4,bytes4)"(
      role?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes4,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes4,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK8605463013(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT4146650865(overrides?: CallOverrides): Promise<BigNumber>;

    auction(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcPayout(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    clear(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    limits(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lines(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payBase(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxBaseIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    payFYToken(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    point(
      param: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    protected(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAuctioneerReward(
      auctioneerReward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setLineAndLimit(
      ilkId: PromiseOrValue<BytesLike>,
      baseId: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      vaultProportion: PromiseOrValue<BigNumberish>,
      collateralProportion: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProtected(
      owner: PromiseOrValue<string>,
      _protected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK8605463013(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT4146650865(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auction(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    auctioneerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPayout(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clear(
      vaultId: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limits(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lines(
      arg0: PromiseOrValue<BytesLike>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payBase(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxBaseIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    payFYToken(
      vaultId: PromiseOrValue<BytesLike>,
      to: PromiseOrValue<string>,
      minInkOut: PromiseOrValue<BigNumberish>,
      maxArtIn: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    point(
      param: PromiseOrValue<BytesLike>,
      value: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    protected(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: PromiseOrValue<BytesLike>[],
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAuctioneerReward(
      auctioneerReward_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setLineAndLimit(
      ilkId: PromiseOrValue<BytesLike>,
      baseId: PromiseOrValue<BytesLike>,
      duration: PromiseOrValue<BigNumberish>,
      vaultProportion: PromiseOrValue<BigNumberish>,
      collateralProportion: PromiseOrValue<BigNumberish>,
      max: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProtected(
      owner: PromiseOrValue<string>,
      _protected: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      adminRole: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
