/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface AssertInterface extends utils.Interface {
  functions: {
    "assertEq(address,bytes,address,bytes)": FunctionFragment;
    "assertEq(bytes,bytes)": FunctionFragment;
    "assertEq(uint256,uint256)": FunctionFragment;
    "assertEq(address,bytes,uint256)": FunctionFragment;
    "assertEq(bool,bool)": FunctionFragment;
    "assertEqAbs(address,bytes,address,bytes,uint256)": FunctionFragment;
    "assertEqAbs(address,bytes,uint256,uint256)": FunctionFragment;
    "assertEqAbs(uint256,uint256,uint256)": FunctionFragment;
    "assertEqRel(address,bytes,uint256,uint256)": FunctionFragment;
    "assertEqRel(uint256,uint256,uint256)": FunctionFragment;
    "assertEqRel(address,bytes,address,bytes,uint256)": FunctionFragment;
    "assertGe(address,bytes,address,bytes)": FunctionFragment;
    "assertGe(uint256,uint256)": FunctionFragment;
    "assertGe(address,bytes,uint256)": FunctionFragment;
    "assertGt(address,bytes,address,bytes)": FunctionFragment;
    "assertGt(address,bytes,uint256)": FunctionFragment;
    "assertGt(uint256,uint256)": FunctionFragment;
    "assertLe(address,bytes,uint256)": FunctionFragment;
    "assertLe(uint256,uint256)": FunctionFragment;
    "assertLe(address,bytes,address,bytes)": FunctionFragment;
    "assertLt(address,bytes,uint256)": FunctionFragment;
    "assertLt(uint256,uint256)": FunctionFragment;
    "assertLt(address,bytes,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "assertEq(address,bytes,address,bytes)"
      | "assertEq(bytes,bytes)"
      | "assertEq(uint256,uint256)"
      | "assertEq(address,bytes,uint256)"
      | "assertEq(bool,bool)"
      | "assertEqAbs(address,bytes,address,bytes,uint256)"
      | "assertEqAbs(address,bytes,uint256,uint256)"
      | "assertEqAbs(uint256,uint256,uint256)"
      | "assertEqRel(address,bytes,uint256,uint256)"
      | "assertEqRel(uint256,uint256,uint256)"
      | "assertEqRel(address,bytes,address,bytes,uint256)"
      | "assertGe(address,bytes,address,bytes)"
      | "assertGe(uint256,uint256)"
      | "assertGe(address,bytes,uint256)"
      | "assertGt(address,bytes,address,bytes)"
      | "assertGt(address,bytes,uint256)"
      | "assertGt(uint256,uint256)"
      | "assertLe(address,bytes,uint256)"
      | "assertLe(uint256,uint256)"
      | "assertLe(address,bytes,address,bytes)"
      | "assertLt(address,bytes,uint256)"
      | "assertLt(uint256,uint256)"
      | "assertLt(address,bytes,address,bytes)"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "assertEq(address,bytes,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEq(bytes,bytes)",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEq(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEq(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEq(bool,bool)",
    values: [PromiseOrValue<boolean>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqAbs(address,bytes,address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqAbs(address,bytes,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqAbs(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqRel(address,bytes,uint256,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqRel(uint256,uint256,uint256)",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqRel(address,bytes,address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGe(address,bytes,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGe(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGe(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGt(address,bytes,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGt(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGt(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLe(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLe(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLe(address,bytes,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLt(address,bytes,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLt(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLt(address,bytes,address,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "assertEq(address,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEq(bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEq(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEq(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEq(bool,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqAbs(address,bytes,address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqAbs(address,bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqAbs(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqRel(address,bytes,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqRel(uint256,uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqRel(address,bytes,address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGe(address,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGe(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGe(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGt(address,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGt(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertGt(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLe(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLe(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLe(address,bytes,address,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLt(address,bytes,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLt(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertLt(address,bytes,address,bytes)",
    data: BytesLike
  ): Result;

  events: {};
}

export interface Assert extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AssertInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertEq(bytes,bytes)"(
      actual: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEq(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertEq(bool,bool)"(
      actual: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertGe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertGt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertLe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "assertLt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "assertEq(address,bytes,address,bytes)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertEq(bytes,bytes)"(
    actual: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEq(uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEq(address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertEq(bool,bool)"(
    actual: PromiseOrValue<boolean>,
    expected: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqAbs(address,bytes,address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    abs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertEqAbs(address,bytes,uint256,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    abs: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertEqAbs(uint256,uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    abs: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqRel(address,bytes,uint256,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    rel: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertEqRel(uint256,uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    rel: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqRel(address,bytes,address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    rel: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertGe(address,bytes,address,bytes)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertGe(uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertGe(address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertGt(address,bytes,address,bytes)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertGt(address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertGt(uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLe(address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertLe(uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLe(address,bytes,address,bytes)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertLt(address,bytes,uint256)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "assertLt(uint256,uint256)"(
    actual: PromiseOrValue<BigNumberish>,
    expected: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLt(address,bytes,address,bytes)"(
    actualTarget: PromiseOrValue<string>,
    actualCalldata: PromiseOrValue<BytesLike>,
    expectedTarget: PromiseOrValue<string>,
    expectedCalldata: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(bytes,bytes)"(
      actual: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(bool,bool)"(
      actual: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertEq(bytes,bytes)"(
      actual: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEq(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertEq(bool,bool)"(
      actual: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertGe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertGt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertLe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "assertLt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertEq(bytes,bytes)"(
      actual: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEq(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertEq(bool,bool)"(
      actual: PromiseOrValue<boolean>,
      expected: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      abs: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      rel: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertGe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertLe(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "assertLt(uint256,uint256)"(
      actual: PromiseOrValue<BigNumberish>,
      expected: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: PromiseOrValue<string>,
      actualCalldata: PromiseOrValue<BytesLike>,
      expectedTarget: PromiseOrValue<string>,
      expectedCalldata: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
