/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssertInterface extends ethers.utils.Interface {
  functions: {
    "assertEq(address,bytes,address,bytes)": FunctionFragment;
    "assertEqAbs(address,bytes,address,bytes,uint256)": FunctionFragment;
    "assertEqRel(address,bytes,uint256,uint256)": FunctionFragment;
    "assertGe(address,bytes,address,bytes)": FunctionFragment;
    "assertGt(address,bytes,address,bytes)": FunctionFragment;
    "assertLe(address,bytes,uint256)": FunctionFragment;
    "assertLt(address,bytes,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "assertEq",
    values: [string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqAbs",
    values: [string, BytesLike, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assertEqRel",
    values: [string, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGe",
    values: [string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertGt",
    values: [string, BytesLike, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLe",
    values: [string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "assertLt",
    values: [string, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "assertEq", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "assertEqAbs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "assertEqRel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "assertGe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assertGt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assertLe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "assertLt", data: BytesLike): Result;

  events: {};
}

export class Assert extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssertInterface;

  functions: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertEq(bytes,bytes)"(
      actual: BytesLike,
      expected: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEq(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertEq(bool,bool)"(
      actual: boolean,
      expected: boolean,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertGe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertGt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertLe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "assertLt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  "assertEq(address,bytes,address,bytes)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertEq(bytes,bytes)"(
    actual: BytesLike,
    expected: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEq(uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEq(address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertEq(bool,bool)"(
    actual: boolean,
    expected: boolean,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqAbs(address,bytes,address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    abs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertEqAbs(address,bytes,uint256,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    abs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertEqAbs(uint256,uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    abs: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqRel(address,bytes,uint256,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    rel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertEqRel(uint256,uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    rel: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertEqRel(address,bytes,address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    rel: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertGe(address,bytes,address,bytes)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertGe(uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertGe(address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertGt(address,bytes,address,bytes)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertGt(address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertGt(uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLe(address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertLe(uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLe(address,bytes,address,bytes)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertLt(address,bytes,uint256)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expected: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "assertLt(uint256,uint256)"(
    actual: BigNumberish,
    expected: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "assertLt(address,bytes,address,bytes)"(
    actualTarget: string,
    actualCalldata: BytesLike,
    expectedTarget: string,
    expectedCalldata: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(bytes,bytes)"(
      actual: BytesLike,
      expected: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEq(bool,bool)"(
      actual: boolean,
      expected: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertGt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertEq(bytes,bytes)"(
      actual: BytesLike,
      expected: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEq(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertEq(bool,bool)"(
      actual: boolean,
      expected: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertGe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertGt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertLe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "assertLt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "assertEq(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertEq(bytes,bytes)"(
      actual: BytesLike,
      expected: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEq(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEq(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertEq(bool,bool)"(
      actual: boolean,
      expected: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqAbs(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      abs: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqRel(address,bytes,uint256,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertEqRel(uint256,uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      rel: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertEqRel(address,bytes,address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      rel: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertGe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertGe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertGe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertGt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLe(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertLe(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLe(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertLt(address,bytes,uint256)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expected: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "assertLt(uint256,uint256)"(
      actual: BigNumberish,
      expected: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "assertLt(address,bytes,address,bytes)"(
      actualTarget: string,
      actualCalldata: BytesLike,
      expectedTarget: string,
      expectedCalldata: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
