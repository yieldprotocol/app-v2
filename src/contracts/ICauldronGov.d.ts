/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface ICauldronGovInterface extends ethers.utils.Interface {
  functions: {
    'addAsset(bytes6,address)': FunctionFragment;
    'addIlks(bytes6,bytes6[])': FunctionFragment;
    'addSeries(bytes6,bytes6,address)': FunctionFragment;
    'assets(bytes6)': FunctionFragment;
    'rateOracles(bytes6)': FunctionFragment;
    'series(bytes6)': FunctionFragment;
    'setDebtLimits(bytes6,bytes6,uint96,uint24,uint8)': FunctionFragment;
    'setRateOracle(bytes6,address)': FunctionFragment;
    'setSpotOracle(bytes6,bytes6,address,uint32)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addAsset', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'addIlks', values: [BytesLike, BytesLike[]]): string;
  encodeFunctionData(functionFragment: 'addSeries', values: [BytesLike, BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'assets', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'rateOracles', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'series', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'setDebtLimits',
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: 'setRateOracle', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'setSpotOracle', values: [BytesLike, BytesLike, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'addAsset', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addIlks', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addSeries', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'assets', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rateOracles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'series', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDebtLimits', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRateOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSpotOracle', data: BytesLike): Result;

  events: {};
}

export class ICauldronGov extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICauldronGovInterface;

  functions: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ]
    >;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addAsset(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addIlks(
    arg0: BytesLike,
    arg1: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addSeries(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  series(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, number] & {
      fyToken: string;
      baseId: string;
      maturity: number;
    }
  >;

  setDebtLimits(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: BigNumberish,
    arg3: BigNumberish,
    arg4: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRateOracle(
    arg0: BytesLike,
    arg1: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSpotOracle(
    arg0: BytesLike,
    arg1: BytesLike,
    arg2: string,
    arg3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAsset(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<void>;

    addIlks(arg0: BytesLike, arg1: BytesLike[], overrides?: CallOverrides): Promise<void>;

    addSeries(arg0: BytesLike, arg1: BytesLike, arg2: string, overrides?: CallOverrides): Promise<void>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    series(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, number] & {
        fyToken: string;
        baseId: string;
        maturity: number;
      }
    >;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setRateOracle(arg0: BytesLike, arg1: string, overrides?: CallOverrides): Promise<void>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAsset(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addIlks(
      arg0: BytesLike,
      arg1: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addSeries(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    assets(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rateOracles(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    series(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setDebtLimits(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRateOracle(
      arg0: BytesLike,
      arg1: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSpotOracle(
      arg0: BytesLike,
      arg1: BytesLike,
      arg2: string,
      arg3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
