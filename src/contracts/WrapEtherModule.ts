/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface WrapEtherModuleInterface extends utils.Interface {
  functions: {
    "borrowingFee()": FunctionFragment;
    "cauldron()": FunctionFragment;
    "integrations(address)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "router()": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "wrap(address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "borrowingFee"
      | "cauldron"
      | "integrations"
      | "joins"
      | "modules"
      | "pools"
      | "router"
      | "tokens"
      | "weth"
      | "wrap"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "integrations",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "joins",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "modules",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokens",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "wrap",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;

  events: {
    "FeeSet(uint256)": EventFragment;
    "IntegrationAdded(address,bool)": EventFragment;
    "JoinAdded(bytes6,address)": EventFragment;
    "ModuleAdded(address,bool)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
    "TokenAdded(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntegrationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
}

export interface FeeSetEventObject {
  fee: BigNumber;
}
export type FeeSetEvent = TypedEvent<[BigNumber], FeeSetEventObject>;

export type FeeSetEventFilter = TypedEventFilter<FeeSetEvent>;

export interface IntegrationAddedEventObject {
  integration: string;
  set: boolean;
}
export type IntegrationAddedEvent = TypedEvent<
  [string, boolean],
  IntegrationAddedEventObject
>;

export type IntegrationAddedEventFilter =
  TypedEventFilter<IntegrationAddedEvent>;

export interface JoinAddedEventObject {
  assetId: string;
  join: string;
}
export type JoinAddedEvent = TypedEvent<[string, string], JoinAddedEventObject>;

export type JoinAddedEventFilter = TypedEventFilter<JoinAddedEvent>;

export interface ModuleAddedEventObject {
  module: string;
  set: boolean;
}
export type ModuleAddedEvent = TypedEvent<
  [string, boolean],
  ModuleAddedEventObject
>;

export type ModuleAddedEventFilter = TypedEventFilter<ModuleAddedEvent>;

export interface PoolAddedEventObject {
  seriesId: string;
  pool: string;
}
export type PoolAddedEvent = TypedEvent<[string, string], PoolAddedEventObject>;

export type PoolAddedEventFilter = TypedEventFilter<PoolAddedEvent>;

export interface TokenAddedEventObject {
  token: string;
  set: boolean;
}
export type TokenAddedEvent = TypedEvent<
  [string, boolean],
  TokenAddedEventObject
>;

export type TokenAddedEventFilter = TypedEventFilter<TokenAddedEvent>;

export interface WrapEtherModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WrapEtherModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    integrations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    wrap(
      receiver: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  integrations(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  joins(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  modules(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pools(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  tokens(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  weth(overrides?: CallOverrides): Promise<string>;

  wrap(
    receiver: PromiseOrValue<string>,
    wad: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    integrations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    weth(overrides?: CallOverrides): Promise<string>;

    wrap(
      receiver: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeSet(uint256)"(fee?: null): FeeSetEventFilter;
    FeeSet(fee?: null): FeeSetEventFilter;

    "IntegrationAdded(address,bool)"(
      integration?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): IntegrationAddedEventFilter;
    IntegrationAdded(
      integration?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): IntegrationAddedEventFilter;

    "JoinAdded(bytes6,address)"(
      assetId?: PromiseOrValue<BytesLike> | null,
      join?: PromiseOrValue<string> | null
    ): JoinAddedEventFilter;
    JoinAdded(
      assetId?: PromiseOrValue<BytesLike> | null,
      join?: PromiseOrValue<string> | null
    ): JoinAddedEventFilter;

    "ModuleAdded(address,bool)"(
      module?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): ModuleAddedEventFilter;
    ModuleAdded(
      module?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): ModuleAddedEventFilter;

    "PoolAdded(bytes6,address)"(
      seriesId?: PromiseOrValue<BytesLike> | null,
      pool?: PromiseOrValue<string> | null
    ): PoolAddedEventFilter;
    PoolAdded(
      seriesId?: PromiseOrValue<BytesLike> | null,
      pool?: PromiseOrValue<string> | null
    ): PoolAddedEventFilter;

    "TokenAdded(address,bool)"(
      token?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): TokenAddedEventFilter;
    TokenAdded(
      token?: PromiseOrValue<string> | null,
      set?: PromiseOrValue<boolean> | null
    ): TokenAddedEventFilter;
  };

  estimateGas: {
    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    integrations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      receiver: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    integrations(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokens(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrap(
      receiver: PromiseOrValue<string>,
      wad: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
