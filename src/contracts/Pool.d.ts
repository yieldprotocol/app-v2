/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PoolInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "LOCK()": FunctionFragment;
    "LOCK8605463013()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "ROOT4146650865()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "base()": FunctionFragment;
    "baseToken()": FunctionFragment;
    "burn(address,address,uint256,uint256)": FunctionFragment;
    "burnForBase(address,uint256,uint256)": FunctionFragment;
    "buyBase(address,uint128,uint128)": FunctionFragment;
    "buyBasePreview(uint128)": FunctionFragment;
    "buyFYToken(address,uint128,uint128)": FunctionFragment;
    "buyFYTokenPreview(uint128)": FunctionFragment;
    "cumulativeRatioLast()": FunctionFragment;
    "currentCumulativeRatio()": FunctionFragment;
    "decimals()": FunctionFragment;
    "deploymentChainId()": FunctionFragment;
    "fyToken()": FunctionFragment;
    "g1()": FunctionFragment;
    "g1Fee()": FunctionFragment;
    "g2()": FunctionFragment;
    "getBaseBalance()": FunctionFragment;
    "getC()": FunctionFragment;
    "getCache()": FunctionFragment;
    "getCurrentSharePrice()": FunctionFragment;
    "getFYTokenBalance()": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "getSharesBalance()": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "init(address,address,uint256,uint256)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "maturity()": FunctionFragment;
    "mint(address,address,uint256,uint256)": FunctionFragment;
    "mintWithBase(address,address,uint256,uint256,uint256)": FunctionFragment;
    "mu()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "retrieveBase(address)": FunctionFragment;
    "retrieveFYToken(address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "scaleFactor()": FunctionFragment;
    "sellBase(address,uint128)": FunctionFragment;
    "sellBasePreview(uint128)": FunctionFragment;
    "sellFYToken(address,uint128)": FunctionFragment;
    "sellFYTokenPreview(uint128)": FunctionFragment;
    "setFees(uint16)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "sharesToken()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "ts()": FunctionFragment;
    "unwrap(address)": FunctionFragment;
    "unwrapPreview(uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "wrap(address)": FunctionFragment;
    "wrapPreview(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK8605463013",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOT4146650865",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "base", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "burnForBase",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBase",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyBasePreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYToken",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "cumulativeRatioLast",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "currentCumulativeRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deploymentChainId",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "fyToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "g1", values?: undefined): string;
  encodeFunctionData(functionFragment: "g1Fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "g2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBaseBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getC", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCache", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCurrentSharePrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFYTokenBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getSharesBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "maturity", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintWithBase",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "mu", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveBase",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieveFYToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "scaleFactor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellBase",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellBasePreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYToken",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sellFYTokenPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ts", values?: undefined): string;
  encodeFunctionData(functionFragment: "unwrap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "unwrapPreview",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(functionFragment: "wrap", values: [string]): string;
  encodeFunctionData(
    functionFragment: "wrapPreview",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK8605463013",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT4146650865",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "base", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnForBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyBasePreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "buyFYToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cumulativeRatioLast",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentCumulativeRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deploymentChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fyToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g1Fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBaseBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getC", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCache", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentSharePrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFYTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSharesBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maturity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintWithBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mu", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveBase",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retrieveFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "scaleFactor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellBase", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sellBasePreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sellFYTokenPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unwrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unwrapPreview",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wrapPreview",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "FeesSet(uint16)": EventFragment;
    "Liquidity(uint32,address,address,address,int256,int256,int256)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
    "Sync(uint112,uint112,uint256)": EventFragment;
    "Trade(uint32,address,address,int256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "gg()": EventFragment;
    "gm()": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Liquidity"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trade"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "gg"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "gm"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type FeesSetEvent = TypedEvent<[number] & { g1Fee: number }>;

export type LiquidityEvent = TypedEvent<
  [number, string, string, string, BigNumber, BigNumber, BigNumber] & {
    maturity: number;
    from: string;
    to: string;
    fyTokenTo: string;
    base: BigNumber;
    fyTokens: BigNumber;
    poolTokens: BigNumber;
  }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string] & { role: string; newAdminRole: string }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type SyncEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber] & {
    baseCached: BigNumber;
    fyTokenCached: BigNumber;
    cumulativeBalancesRatio: BigNumber;
  }
>;

export type TradeEvent = TypedEvent<
  [number, string, string, BigNumber, BigNumber] & {
    maturity: number;
    from: string;
    to: string;
    base: BigNumber;
    fyTokens: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type ggEvent = TypedEvent<[] & {}>;

export type gmEvent = TypedEvent<[] & {}>;

export class Pool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PoolInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    LOCK(overrides?: CallOverrides): Promise<[string]>;

    LOCK8605463013(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    ROOT4146650865(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    baseToken(overrides?: CallOverrides): Promise<[string]>;

    burn(
      baseTo: string,
      fyTokenTo: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnForBase(
      to: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fyTokenIn: BigNumber }>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { baseIn: BigNumber }>;

    cumulativeRatioLast(overrides?: CallOverrides): Promise<[BigNumber]>;

    currentCumulativeRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCumulativeRatio_: BigNumber;
        blockTimestampCurrent: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    deploymentChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    g1(overrides?: CallOverrides): Promise<[BigNumber]>;

    g1Fee(overrides?: CallOverrides): Promise<[number]>;

    g2(overrides?: CallOverrides): Promise<[BigNumber]>;

    getBaseBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getC(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCache(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, number]>;

    getCurrentSharePrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    getSharesBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    init(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    maturity(overrides?: CallOverrides): Promise<[number]>;

    mint(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithBase(
      to: string,
      remainder: string,
      fyTokenToBuy: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mu(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<[BigNumber]>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { fyTokenOut: BigNumber }>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    setFees(
      g1Fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sharesToken(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ts(overrides?: CallOverrides): Promise<[BigNumber]>;

    unwrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unwrapPreview(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { assets: BigNumber }>;

    version(overrides?: CallOverrides): Promise<[string]>;

    wrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wrapPreview(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { shares: BigNumber }>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  LOCK(overrides?: CallOverrides): Promise<string>;

  LOCK8605463013(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  ROOT4146650865(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

  base(overrides?: CallOverrides): Promise<string>;

  baseToken(overrides?: CallOverrides): Promise<string>;

  burn(
    baseTo: string,
    fyTokenTo: string,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnForBase(
    to: string,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBase(
    to: string,
    baseOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBasePreview(
    baseOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(
    fyTokenOut: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cumulativeRatioLast(overrides?: CallOverrides): Promise<BigNumber>;

  currentCumulativeRatio(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      currentCumulativeRatio_: BigNumber;
      blockTimestampCurrent: BigNumber;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  g1(overrides?: CallOverrides): Promise<BigNumber>;

  g1Fee(overrides?: CallOverrides): Promise<number>;

  g2(overrides?: CallOverrides): Promise<BigNumber>;

  getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getC(overrides?: CallOverrides): Promise<BigNumber>;

  getCache(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, number, number]>;

  getCurrentSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  getSharesBalance(overrides?: CallOverrides): Promise<BigNumber>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  init(
    to: string,
    remainder: string,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  maturity(overrides?: CallOverrides): Promise<number>;

  mint(
    to: string,
    remainder: string,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithBase(
    to: string,
    remainder: string,
    fyTokenToBuy: BigNumberish,
    minRatio: BigNumberish,
    maxRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mu(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveBase(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveFYToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

  sellBase(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBasePreview(
    baseIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sellFYToken(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(
    fyTokenIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  setFees(
    g1Fee_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sharesToken(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ts(overrides?: CallOverrides): Promise<BigNumber>;

  unwrap(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unwrapPreview(
    shares: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  version(overrides?: CallOverrides): Promise<string>;

  wrap(
    receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wrapPreview(
    assets: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    LOCK(overrides?: CallOverrides): Promise<string>;

    LOCK8605463013(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    ROOT4146650865(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<string>;

    baseToken(overrides?: CallOverrides): Promise<string>;

    burn(
      baseTo: string,
      fyTokenTo: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        lpTokensBurned: BigNumber;
        baseOut: BigNumber;
        fyTokenOut: BigNumber;
      }
    >;

    burnForBase(
      to: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { lpTokensBurned: BigNumber; baseOut: BigNumber }
    >;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRatioLast(overrides?: CallOverrides): Promise<BigNumber>;

    currentCumulativeRatio(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        currentCumulativeRatio_: BigNumber;
        blockTimestampCurrent: BigNumber;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g1Fee(overrides?: CallOverrides): Promise<number>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getC(overrides?: CallOverrides): Promise<BigNumber>;

    getCache(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, number, number]>;

    getCurrentSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    getSharesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseIn: BigNumber;
        fyTokenIn: BigNumber;
        lpTokensMinted: BigNumber;
      }
    >;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    maturity(overrides?: CallOverrides): Promise<number>;

    mint(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseIn: BigNumber;
        fyTokenIn: BigNumber;
        lpTokensMinted: BigNumber;
      }
    >;

    mintWithBase(
      to: string,
      remainder: string,
      fyTokenToBuy: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        baseIn: BigNumber;
        fyTokenIn: BigNumber;
        lpTokensMinted: BigNumber;
      }
    >;

    mu(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveBase(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    retrieveFYToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(g1Fee_: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesToken(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;

    unwrap(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    unwrapPreview(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<string>;

    wrap(receiver: string, overrides?: CallOverrides): Promise<BigNumber>;

    wrapPreview(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "FeesSet(uint16)"(
      g1Fee?: null
    ): TypedEventFilter<[number], { g1Fee: number }>;

    FeesSet(g1Fee?: null): TypedEventFilter<[number], { g1Fee: number }>;

    "Liquidity(uint32,address,address,address,int256,int256,int256)"(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      fyTokenTo?: string | null,
      base?: null,
      fyTokens?: null,
      poolTokens?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        fyTokenTo: string;
        base: BigNumber;
        fyTokens: BigNumber;
        poolTokens: BigNumber;
      }
    >;

    Liquidity(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      fyTokenTo?: string | null,
      base?: null,
      fyTokens?: null,
      poolTokens?: null
    ): TypedEventFilter<
      [number, string, string, string, BigNumber, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        fyTokenTo: string;
        base: BigNumber;
        fyTokens: BigNumber;
        poolTokens: BigNumber;
      }
    >;

    "RoleAdminChanged(bytes4,bytes4)"(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    "RoleGranted(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "Sync(uint112,uint112,uint256)"(
      baseCached?: null,
      fyTokenCached?: null,
      cumulativeBalancesRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        baseCached: BigNumber;
        fyTokenCached: BigNumber;
        cumulativeBalancesRatio: BigNumber;
      }
    >;

    Sync(
      baseCached?: null,
      fyTokenCached?: null,
      cumulativeBalancesRatio?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      {
        baseCached: BigNumber;
        fyTokenCached: BigNumber;
        cumulativeBalancesRatio: BigNumber;
      }
    >;

    "Trade(uint32,address,address,int256,int256)"(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      base?: null,
      fyTokens?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        base: BigNumber;
        fyTokens: BigNumber;
      }
    >;

    Trade(
      maturity?: null,
      from?: string | null,
      to?: string | null,
      base?: null,
      fyTokens?: null
    ): TypedEventFilter<
      [number, string, string, BigNumber, BigNumber],
      {
        maturity: number;
        from: string;
        to: string;
        base: BigNumber;
        fyTokens: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "gg()"(): TypedEventFilter<[], {}>;

    gg(): TypedEventFilter<[], {}>;

    "gm()"(): TypedEventFilter<[], {}>;

    gm(): TypedEventFilter<[], {}>;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK8605463013(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT4146650865(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(guy: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    baseToken(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      baseTo: string,
      fyTokenTo: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnForBase(
      to: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cumulativeRatioLast(overrides?: CallOverrides): Promise<BigNumber>;

    currentCumulativeRatio(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    deploymentChainId(overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    g1(overrides?: CallOverrides): Promise<BigNumber>;

    g1Fee(overrides?: CallOverrides): Promise<BigNumber>;

    g2(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getC(overrides?: CallOverrides): Promise<BigNumber>;

    getCache(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentSharePrice(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSharesBalance(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithBase(
      to: string,
      remainder: string,
      fyTokenToBuy: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mu(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    scaleFactor(overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFees(
      g1Fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sharesToken(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ts(overrides?: CallOverrides): Promise<BigNumber>;

    unwrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unwrapPreview(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    wrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wrapPreview(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK8605463013(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT4146650865(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      guy: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    baseToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      baseTo: string,
      fyTokenTo: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnForBase(
      to: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBasePreview(
      baseOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(
      fyTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cumulativeRatioLast(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentCumulativeRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploymentChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g1Fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    g2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getC(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCache(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentSharePrice(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSharesBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      remainder: string,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithBase(
      to: string,
      remainder: string,
      fyTokenToBuy: BigNumberish,
      minRatio: BigNumberish,
      maxRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mu(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    scaleFactor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBasePreview(
      baseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(
      fyTokenIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFees(
      g1Fee_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sharesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unwrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unwrapPreview(
      shares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wrap(
      receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wrapPreview(
      assets: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
