/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LadleInterface extends ethers.utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "LOCK8605463013()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "ROOT4146650865()": FunctionFragment;
    "addIntegration(address,bool)": FunctionFragment;
    "addJoin(bytes6,address)": FunctionFragment;
    "addModule(address,bool)": FunctionFragment;
    "addPool(bytes6,address)": FunctionFragment;
    "addToken(address,bool)": FunctionFragment;
    "batch(bytes[])": FunctionFragment;
    "borrowingFee()": FunctionFragment;
    "build(bytes6,bytes6,uint8)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "close(bytes12,address,int128,int128)": FunctionFragment;
    "closeFromLadle(bytes12,address)": FunctionFragment;
    "destroy(bytes12)": FunctionFragment;
    "exitEther(address)": FunctionFragment;
    "forwardDaiPermit(address,address,uint256,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "forwardPermit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "give(bytes12,address)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "integrations(address)": FunctionFragment;
    "joinEther(bytes6)": FunctionFragment;
    "joins(bytes6)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "moduleCall(address,bytes)": FunctionFragment;
    "modules(address)": FunctionFragment;
    "pools(bytes6)": FunctionFragment;
    "pour(bytes12,address,int128,int128)": FunctionFragment;
    "redeem(bytes6,address,uint256)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "repay(bytes12,address,int128,uint128)": FunctionFragment;
    "repayFromLadle(bytes12,address)": FunctionFragment;
    "repayVault(bytes12,address,int128,uint128)": FunctionFragment;
    "retrieve(address,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "roll(bytes12,bytes6,uint8,uint128)": FunctionFragment;
    "route(address,bytes)": FunctionFragment;
    "router()": FunctionFragment;
    "serve(bytes12,address,uint128,uint128,uint128)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
    "stir(bytes12,bytes12,uint128,uint128)": FunctionFragment;
    "tokens(address)": FunctionFragment;
    "transfer(address,address,uint128)": FunctionFragment;
    "tweak(bytes12,bytes6,bytes6)": FunctionFragment;
    "weth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK8605463013",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOT4146650865",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addIntegration",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addJoin",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addModule",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "addPool",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addToken",
    values: [string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "batch", values: [BytesLike[]]): string;
  encodeFunctionData(
    functionFragment: "borrowingFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "build",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "close",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "closeFromLadle",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "destroy", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "exitEther", values: [string]): string;
  encodeFunctionData(
    functionFragment: "forwardDaiPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      boolean,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "forwardPermit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "give",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "integrations",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinEther",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "joins", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "moduleCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "modules", values: [string]): string;
  encodeFunctionData(functionFragment: "pools", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "pour",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "repayFromLadle",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "repayVault",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "retrieve",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "roll",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "route",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "serve",
    values: [BytesLike, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stir",
    values: [BytesLike, BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "tokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tweak",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK8605463013",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT4146650865",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addIntegration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addJoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addModule", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "batch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "borrowingFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "build", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "close", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "closeFromLadle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "destroy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exitEther", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "forwardDaiPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forwardPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "give", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "integrations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "joinEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joins", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "moduleCall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "modules", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pour", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "repayFromLadle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "repayVault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "retrieve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "roll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "route", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "serve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stir", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tweak", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;

  events: {
    "FeeSet(uint256)": EventFragment;
    "IntegrationAdded(address,bool)": EventFragment;
    "JoinAdded(bytes6,address)": EventFragment;
    "ModuleAdded(address,bool)": EventFragment;
    "PoolAdded(bytes6,address)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
    "TokenAdded(address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IntegrationAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JoinAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenAdded"): EventFragment;
}

export type FeeSetEvent = TypedEvent<[BigNumber] & { fee: BigNumber }>;

export type IntegrationAddedEvent = TypedEvent<
  [string, boolean] & { integration: string; set: boolean }
>;

export type JoinAddedEvent = TypedEvent<
  [string, string] & { assetId: string; join: string }
>;

export type ModuleAddedEvent = TypedEvent<
  [string, boolean] & { module: string; set: boolean }
>;

export type PoolAddedEvent = TypedEvent<
  [string, string] & { seriesId: string; pool: string }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string] & { role: string; newAdminRole: string }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type TokenAddedEvent = TypedEvent<
  [string, boolean] & { token: string; set: boolean }
>;

export class Ladle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LadleInterface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    LOCK8605463013(overrides?: CallOverrides): Promise<[string]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    ROOT4146650865(overrides?: CallOverrides): Promise<[string]>;

    addIntegration(
      integration: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addModule(
      module: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addToken(
      token: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    batch(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    build(
      seriesId: BytesLike,
      ilkId: BytesLike,
      salt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    close(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    destroy(
      vaultId_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exitEther(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forwardDaiPermit(
      token: string,
      spender: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forwardPermit(
      token: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    give(
      vaultId_: BytesLike,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    integrations(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    joinEther(
      etherId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    moduleCall(
      module: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modules(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    pour(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeem(
      seriesId: BytesLike,
      to: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repay(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      min: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    repayVault(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieve(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    roll(
      vaultId_: BytesLike,
      newSeriesId: BytesLike,
      loan: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    route(
      integration: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    serve(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      base: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    transfer(
      token: string,
      receiver: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tweak(
      vaultId_: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  LOCK8605463013(overrides?: CallOverrides): Promise<string>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  ROOT4146650865(overrides?: CallOverrides): Promise<string>;

  addIntegration(
    integration: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addJoin(
    assetId: BytesLike,
    join: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addModule(
    module: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addPool(
    seriesId: BytesLike,
    pool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addToken(
    token: string,
    set: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  batch(
    calls: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

  build(
    seriesId: BytesLike,
    ilkId: BytesLike,
    salt: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  close(
    vaultId_: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeFromLadle(
    vaultId_: BytesLike,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  destroy(
    vaultId_: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exitEther(
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forwardDaiPermit(
    token: string,
    spender: string,
    nonce: BigNumberish,
    deadline: BigNumberish,
    allowed: boolean,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forwardPermit(
    token: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  give(
    vaultId_: BytesLike,
    receiver: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  integrations(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  joinEther(
    etherId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  lockRole(
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  moduleCall(
    module: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

  pour(
    vaultId_: BytesLike,
    to: string,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeem(
    seriesId: BytesLike,
    to: string,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repay(
    vaultId_: BytesLike,
    to: string,
    ink: BigNumberish,
    min: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayFromLadle(
    vaultId_: BytesLike,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  repayVault(
    vaultId_: BytesLike,
    to: string,
    ink: BigNumberish,
    max: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieve(
    token: string,
    to: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  roll(
    vaultId_: BytesLike,
    newSeriesId: BytesLike,
    loan: BigNumberish,
    max: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  route(
    integration: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  serve(
    vaultId_: BytesLike,
    to: string,
    ink: BigNumberish,
    base: BigNumberish,
    max: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stir(
    from: BytesLike,
    to: BytesLike,
    ink: BigNumberish,
    art: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  transfer(
    token: string,
    receiver: string,
    wad: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tweak(
    vaultId_: BytesLike,
    seriesId: BytesLike,
    ilkId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    LOCK8605463013(overrides?: CallOverrides): Promise<string>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    ROOT4146650865(overrides?: CallOverrides): Promise<string>;

    addIntegration(
      integration: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addModule(
      module: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addToken(
      token: string,
      set: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    batch(calls: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    build(
      seriesId: BytesLike,
      ilkId: BytesLike,
      salt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        }
      ]
    >;

    cauldron(overrides?: CallOverrides): Promise<string>;

    close(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    closeFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    destroy(vaultId_: BytesLike, overrides?: CallOverrides): Promise<void>;

    exitEther(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    forwardDaiPermit(
      token: string,
      spender: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    forwardPermit(
      token: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    give(
      vaultId_: BytesLike,
      receiver: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    integrations(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    joinEther(
      etherId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    moduleCall(
      module: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    modules(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<string>;

    pour(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    redeem(
      seriesId: BytesLike,
      to: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      min: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    repayVault(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    retrieve(
      token: string,
      to: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    roll(
      vaultId_: BytesLike,
      newSeriesId: BytesLike,
      loan: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        },
        BigNumber
      ] & {
        vault: [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        };
        newDebt: BigNumber;
      }
    >;

    route(
      integration: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    serve(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      base: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    transfer(
      token: string,
      receiver: string,
      wad: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tweak(
      vaultId_: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string] & {
        owner: string;
        seriesId: string;
        ilkId: string;
      }
    >;

    weth(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FeeSet(uint256)"(
      fee?: null
    ): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    FeeSet(fee?: null): TypedEventFilter<[BigNumber], { fee: BigNumber }>;

    "IntegrationAdded(address,bool)"(
      integration?: string | null,
      set?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { integration: string; set: boolean }
    >;

    IntegrationAdded(
      integration?: string | null,
      set?: boolean | null
    ): TypedEventFilter<
      [string, boolean],
      { integration: string; set: boolean }
    >;

    "JoinAdded(bytes6,address)"(
      assetId?: BytesLike | null,
      join?: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    JoinAdded(
      assetId?: BytesLike | null,
      join?: string | null
    ): TypedEventFilter<[string, string], { assetId: string; join: string }>;

    "ModuleAdded(address,bool)"(
      module?: string | null,
      set?: boolean | null
    ): TypedEventFilter<[string, boolean], { module: string; set: boolean }>;

    ModuleAdded(
      module?: string | null,
      set?: boolean | null
    ): TypedEventFilter<[string, boolean], { module: string; set: boolean }>;

    "PoolAdded(bytes6,address)"(
      seriesId?: BytesLike | null,
      pool?: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;

    PoolAdded(
      seriesId?: BytesLike | null,
      pool?: string | null
    ): TypedEventFilter<[string, string], { seriesId: string; pool: string }>;

    "RoleAdminChanged(bytes4,bytes4)"(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    "RoleGranted(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "TokenAdded(address,bool)"(
      token?: string | null,
      set?: boolean | null
    ): TypedEventFilter<[string, boolean], { token: string; set: boolean }>;

    TokenAdded(
      token?: string | null,
      set?: boolean | null
    ): TypedEventFilter<[string, boolean], { token: string; set: boolean }>;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK8605463013(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT4146650865(overrides?: CallOverrides): Promise<BigNumber>;

    addIntegration(
      integration: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addModule(
      module: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addToken(
      token: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    batch(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrowingFee(overrides?: CallOverrides): Promise<BigNumber>;

    build(
      seriesId: BytesLike,
      ilkId: BytesLike,
      salt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    close(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    destroy(
      vaultId_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exitEther(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forwardDaiPermit(
      token: string,
      spender: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forwardPermit(
      token: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    give(
      vaultId_: BytesLike,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    integrations(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    joinEther(
      etherId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joins(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    moduleCall(
      module: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modules(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    pools(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    pour(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeem(
      seriesId: BytesLike,
      to: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repay(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      min: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    repayVault(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieve(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    roll(
      vaultId_: BytesLike,
      newSeriesId: BytesLike,
      loan: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    route(
      integration: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    serve(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      base: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      token: string,
      receiver: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tweak(
      vaultId_: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK8605463013(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT4146650865(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addIntegration(
      integration: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addJoin(
      assetId: BytesLike,
      join: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addModule(
      module: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addPool(
      seriesId: BytesLike,
      pool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addToken(
      token: string,
      set: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    batch(
      calls: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrowingFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    build(
      seriesId: BytesLike,
      ilkId: BytesLike,
      salt: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    close(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    destroy(
      vaultId_: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exitEther(
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forwardDaiPermit(
      token: string,
      spender: string,
      nonce: BigNumberish,
      deadline: BigNumberish,
      allowed: boolean,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forwardPermit(
      token: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    give(
      vaultId_: BytesLike,
      receiver: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    integrations(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    joinEther(
      etherId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joins(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    moduleCall(
      module: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modules(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pour(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      seriesId: BytesLike,
      to: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      min: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayFromLadle(
      vaultId_: BytesLike,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    repayVault(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieve(
      token: string,
      to: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    roll(
      vaultId_: BytesLike,
      newSeriesId: BytesLike,
      loan: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    route(
      integration: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    serve(
      vaultId_: BytesLike,
      to: string,
      ink: BigNumberish,
      base: BigNumberish,
      max: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stir(
      from: BytesLike,
      to: BytesLike,
      ink: BigNumberish,
      art: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      token: string,
      receiver: string,
      wad: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tweak(
      vaultId_: BytesLike,
      seriesId: BytesLike,
      ilkId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
