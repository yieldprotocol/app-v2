/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface WitchV2Interface extends ethers.utils.Interface {
  functions: {
    "LOCK()": FunctionFragment;
    "LOCK8605463013()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "ONE_PERCENT()": FunctionFragment;
    "ROOT()": FunctionFragment;
    "ROOT4146650865()": FunctionFragment;
    "auction(bytes12,address)": FunctionFragment;
    "auctioneerReward()": FunctionFragment;
    "auctions(bytes12)": FunctionFragment;
    "calcPayout(bytes12,address,uint256)": FunctionFragment;
    "cancel(bytes12)": FunctionFragment;
    "cauldron()": FunctionFragment;
    "clear(bytes12)": FunctionFragment;
    "getRoleAdmin(bytes4)": FunctionFragment;
    "grantRole(bytes4,address)": FunctionFragment;
    "grantRoles(bytes4[],address)": FunctionFragment;
    "hasRole(bytes4,address)": FunctionFragment;
    "ladle()": FunctionFragment;
    "limits(bytes6,bytes6)": FunctionFragment;
    "lines(bytes6,bytes6)": FunctionFragment;
    "lockRole(bytes4)": FunctionFragment;
    "payBase(bytes12,address,uint128,uint128)": FunctionFragment;
    "payFYToken(bytes12,address,uint128,uint128)": FunctionFragment;
    "point(bytes32,address)": FunctionFragment;
    "protected(address)": FunctionFragment;
    "renounceRole(bytes4,address)": FunctionFragment;
    "revokeRole(bytes4,address)": FunctionFragment;
    "revokeRoles(bytes4[],address)": FunctionFragment;
    "setAuctioneerReward(uint256)": FunctionFragment;
    "setLineAndLimit(bytes6,bytes6,uint32,uint64,uint64,uint128)": FunctionFragment;
    "setProtected(address,bool)": FunctionFragment;
    "setRoleAdmin(bytes4,bytes4)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "LOCK8605463013",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ROOT", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ROOT4146650865",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auction",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "auctioneerReward",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "auctions", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "calcPayout",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "cancel", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "cauldron", values?: undefined): string;
  encodeFunctionData(functionFragment: "clear", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "ladle", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "limits",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lines",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "lockRole", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "payBase",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "payFYToken",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "point",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(functionFragment: "protected", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRoles",
    values: [BytesLike[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "setAuctioneerReward",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLineAndLimit",
    values: [
      BytesLike,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtected",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoleAdmin",
    values: [BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "LOCK8605463013",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ROOT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "ROOT4146650865",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctioneerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "auctions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calcPayout", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cancel", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "cauldron", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "clear", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRoles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ladle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "limits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lines", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lockRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payBase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payFYToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "point", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protected", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revokeRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setAuctioneerReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLineAndLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtected",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRoleAdmin",
    data: BytesLike
  ): Result;

  events: {
    "Auctioned(bytes12,tuple,uint256,uint256)": EventFragment;
    "AuctioneerRewardSet(uint256)": EventFragment;
    "Bought(bytes12,address,uint256,uint256)": EventFragment;
    "Cancelled(bytes12)": EventFragment;
    "Cleared(bytes12)": EventFragment;
    "Ended(bytes12)": EventFragment;
    "LimitSet(bytes6,bytes6,uint128)": EventFragment;
    "LineSet(bytes6,bytes6,uint32,uint64,uint64)": EventFragment;
    "Point(bytes32,address,address)": EventFragment;
    "ProtectedSet(address,bool)": EventFragment;
    "RoleAdminChanged(bytes4,bytes4)": EventFragment;
    "RoleGranted(bytes4,address,address)": EventFragment;
    "RoleRevoked(bytes4,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Auctioned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctioneerRewardSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Cleared"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Ended"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LimitSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LineSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Point"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtectedSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
}

export type AuctionedEvent = TypedEvent<
  [
    string,
    [string, number, string, BigNumber, BigNumber, string, string, string] & {
      owner: string;
      start: number;
      baseId: string;
      ink: BigNumber;
      art: BigNumber;
      auctioneer: string;
      ilkId: string;
      seriesId: string;
    },
    BigNumber,
    BigNumber
  ] & {
    vaultId: string;
    auction: [
      string,
      number,
      string,
      BigNumber,
      BigNumber,
      string,
      string,
      string
    ] & {
      owner: string;
      start: number;
      baseId: string;
      ink: BigNumber;
      art: BigNumber;
      auctioneer: string;
      ilkId: string;
      seriesId: string;
    };
    duration: BigNumber;
    initialCollateralProportion: BigNumber;
  }
>;

export type AuctioneerRewardSetEvent = TypedEvent<
  [BigNumber] & { auctioneerReward: BigNumber }
>;

export type BoughtEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    vaultId: string;
    buyer: string;
    ink: BigNumber;
    art: BigNumber;
  }
>;

export type CancelledEvent = TypedEvent<[string] & { vaultId: string }>;

export type ClearedEvent = TypedEvent<[string] & { vaultId: string }>;

export type EndedEvent = TypedEvent<[string] & { vaultId: string }>;

export type LimitSetEvent = TypedEvent<
  [string, string, BigNumber] & {
    ilkId: string;
    baseId: string;
    max: BigNumber;
  }
>;

export type LineSetEvent = TypedEvent<
  [string, string, number, BigNumber, BigNumber] & {
    ilkId: string;
    baseId: string;
    duration: number;
    vaultProportion: BigNumber;
    collateralProportion: BigNumber;
  }
>;

export type PointEvent = TypedEvent<
  [string, string, string] & {
    param: string;
    oldValue: string;
    newValue: string;
  }
>;

export type ProtectedSetEvent = TypedEvent<
  [string, boolean] & { value: string; protected: boolean }
>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string] & { role: string; newAdminRole: string }
>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string] & { role: string; account: string; sender: string }
>;

export class WitchV2 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WitchV2Interface;

  functions: {
    LOCK(overrides?: CallOverrides): Promise<[string]>;

    LOCK8605463013(overrides?: CallOverrides): Promise<[string]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    ROOT(overrides?: CallOverrides): Promise<[string]>;

    ROOT4146650865(overrides?: CallOverrides): Promise<[string]>;

    auction(
      vaultId: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctioneerReward(overrides?: CallOverrides): Promise<[BigNumber]>;

    auctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber, string, string, string] & {
        owner: string;
        start: number;
        baseId: string;
        ink: BigNumber;
        art: BigNumber;
        auctioneer: string;
        ilkId: string;
        seriesId: string;
      }
    >;

    calcPayout(
      vaultId: BytesLike,
      to: string,
      maxArtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    cancel(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    cauldron(overrides?: CallOverrides): Promise<[string]>;

    clear(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    ladle(overrides?: CallOverrides): Promise<[string]>;

    limits(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

    lines(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payBase(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxBaseIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payFYToken(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxArtIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    point(
      param: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protected(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAuctioneerReward(
      auctioneerReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLineAndLimit(
      ilkId: BytesLike,
      baseId: BytesLike,
      duration: BigNumberish,
      vaultProportion: BigNumberish,
      collateralProportion: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtected(
      owner: string,
      _protected: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  LOCK(overrides?: CallOverrides): Promise<string>;

  LOCK8605463013(overrides?: CallOverrides): Promise<string>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  ROOT(overrides?: CallOverrides): Promise<string>;

  ROOT4146650865(overrides?: CallOverrides): Promise<string>;

  auction(
    vaultId: BytesLike,
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

  auctions(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, number, string, BigNumber, BigNumber, string, string, string] & {
      owner: string;
      start: number;
      baseId: string;
      ink: BigNumber;
      art: BigNumber;
      auctioneer: string;
      ilkId: string;
      seriesId: string;
    }
  >;

  calcPayout(
    vaultId: BytesLike,
    to: string,
    maxArtIn: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber] & {
      liquidatorCut: BigNumber;
      auctioneerCut: BigNumber;
      artIn: BigNumber;
    }
  >;

  cancel(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  cauldron(overrides?: CallOverrides): Promise<string>;

  clear(
    vaultId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  grantRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: BytesLike,
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  ladle(overrides?: CallOverrides): Promise<string>;

  limits(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

  lines(
    arg0: BytesLike,
    arg1: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      duration: number;
      vaultProportion: BigNumber;
      collateralProportion: BigNumber;
    }
  >;

  lockRole(
    role: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payBase(
    vaultId: BytesLike,
    to: string,
    minInkOut: BigNumberish,
    maxBaseIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payFYToken(
    vaultId: BytesLike,
    to: string,
    minInkOut: BigNumberish,
    maxArtIn: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  point(
    param: BytesLike,
    value: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protected(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  renounceRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  revokeRoles(
    roles: BytesLike[],
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAuctioneerReward(
    auctioneerReward_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLineAndLimit(
    ilkId: BytesLike,
    baseId: BytesLike,
    duration: BigNumberish,
    vaultProportion: BigNumberish,
    collateralProportion: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtected(
    owner: string,
    _protected: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setRoleAdmin(
    role: BytesLike,
    adminRole: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    LOCK(overrides?: CallOverrides): Promise<string>;

    LOCK8605463013(overrides?: CallOverrides): Promise<string>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<string>;

    ROOT4146650865(overrides?: CallOverrides): Promise<string>;

    auction(
      vaultId: BytesLike,
      to: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        },
        [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        },
        [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        }
      ] & {
        auction_: [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        };
        vault: [string, string, string] & {
          owner: string;
          seriesId: string;
          ilkId: string;
        };
        series: [string, string, number] & {
          fyToken: string;
          baseId: string;
          maturity: number;
        };
      }
    >;

    auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, number, string, BigNumber, BigNumber, string, string, string] & {
        owner: string;
        start: number;
        baseId: string;
        ink: BigNumber;
        art: BigNumber;
        auctioneer: string;
        ilkId: string;
        seriesId: string;
      }
    >;

    calcPayout(
      vaultId: BytesLike,
      to: string,
      maxArtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    cancel(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    cauldron(overrides?: CallOverrides): Promise<string>;

    clear(vaultId: BytesLike, overrides?: CallOverrides): Promise<void>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ladle(overrides?: CallOverrides): Promise<string>;

    limits(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber] & { max: BigNumber; sum: BigNumber }>;

    lines(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    lockRole(role: BytesLike, overrides?: CallOverrides): Promise<void>;

    payBase(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxBaseIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        baseIn: BigNumber;
      }
    >;

    payFYToken(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxArtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        liquidatorCut: BigNumber;
        auctioneerCut: BigNumber;
        artIn: BigNumber;
      }
    >;

    point(
      param: BytesLike,
      value: string,
      overrides?: CallOverrides
    ): Promise<void>;

    protected(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setAuctioneerReward(
      auctioneerReward_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLineAndLimit(
      ilkId: BytesLike,
      baseId: BytesLike,
      duration: BigNumberish,
      vaultProportion: BigNumberish,
      collateralProportion: BigNumberish,
      max: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProtected(
      owner: string,
      _protected: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Auctioned(bytes12,tuple,uint256,uint256)"(
      vaultId?: BytesLike | null,
      auction?: null,
      duration?: null,
      initialCollateralProportion?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        },
        BigNumber,
        BigNumber
      ],
      {
        vaultId: string;
        auction: [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        };
        duration: BigNumber;
        initialCollateralProportion: BigNumber;
      }
    >;

    Auctioned(
      vaultId?: BytesLike | null,
      auction?: null,
      duration?: null,
      initialCollateralProportion?: null
    ): TypedEventFilter<
      [
        string,
        [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        },
        BigNumber,
        BigNumber
      ],
      {
        vaultId: string;
        auction: [
          string,
          number,
          string,
          BigNumber,
          BigNumber,
          string,
          string,
          string
        ] & {
          owner: string;
          start: number;
          baseId: string;
          ink: BigNumber;
          art: BigNumber;
          auctioneer: string;
          ilkId: string;
          seriesId: string;
        };
        duration: BigNumber;
        initialCollateralProportion: BigNumber;
      }
    >;

    "AuctioneerRewardSet(uint256)"(
      auctioneerReward?: null
    ): TypedEventFilter<[BigNumber], { auctioneerReward: BigNumber }>;

    AuctioneerRewardSet(
      auctioneerReward?: null
    ): TypedEventFilter<[BigNumber], { auctioneerReward: BigNumber }>;

    "Bought(bytes12,address,uint256,uint256)"(
      vaultId?: BytesLike | null,
      buyer?: string | null,
      ink?: null,
      art?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { vaultId: string; buyer: string; ink: BigNumber; art: BigNumber }
    >;

    Bought(
      vaultId?: BytesLike | null,
      buyer?: string | null,
      ink?: null,
      art?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      { vaultId: string; buyer: string; ink: BigNumber; art: BigNumber }
    >;

    "Cancelled(bytes12)"(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    Cancelled(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    "Cleared(bytes12)"(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    Cleared(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    "Ended(bytes12)"(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    Ended(
      vaultId?: BytesLike | null
    ): TypedEventFilter<[string], { vaultId: string }>;

    "LimitSet(bytes6,bytes6,uint128)"(
      ilkId?: BytesLike | null,
      baseId?: BytesLike | null,
      max?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { ilkId: string; baseId: string; max: BigNumber }
    >;

    LimitSet(
      ilkId?: BytesLike | null,
      baseId?: BytesLike | null,
      max?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { ilkId: string; baseId: string; max: BigNumber }
    >;

    "LineSet(bytes6,bytes6,uint32,uint64,uint64)"(
      ilkId?: BytesLike | null,
      baseId?: BytesLike | null,
      duration?: null,
      vaultProportion?: null,
      collateralProportion?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber, BigNumber],
      {
        ilkId: string;
        baseId: string;
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    LineSet(
      ilkId?: BytesLike | null,
      baseId?: BytesLike | null,
      duration?: null,
      vaultProportion?: null,
      collateralProportion?: null
    ): TypedEventFilter<
      [string, string, number, BigNumber, BigNumber],
      {
        ilkId: string;
        baseId: string;
        duration: number;
        vaultProportion: BigNumber;
        collateralProportion: BigNumber;
      }
    >;

    "Point(bytes32,address,address)"(
      param?: BytesLike | null,
      oldValue?: string | null,
      newValue?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { param: string; oldValue: string; newValue: string }
    >;

    Point(
      param?: BytesLike | null,
      oldValue?: string | null,
      newValue?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { param: string; oldValue: string; newValue: string }
    >;

    "ProtectedSet(address,bool)"(
      value?: string | null,
      protected?: null
    ): TypedEventFilter<
      [string, boolean],
      { value: string; protected: boolean }
    >;

    ProtectedSet(
      value?: string | null,
      protected?: null
    ): TypedEventFilter<
      [string, boolean],
      { value: string; protected: boolean }
    >;

    "RoleAdminChanged(bytes4,bytes4)"(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    RoleAdminChanged(
      role?: BytesLike | null,
      newAdminRole?: BytesLike | null
    ): TypedEventFilter<
      [string, string],
      { role: string; newAdminRole: string }
    >;

    "RoleGranted(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    "RoleRevoked(bytes4,address,address)"(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;

    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { role: string; account: string; sender: string }
    >;
  };

  estimateGas: {
    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK8605463013(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT(overrides?: CallOverrides): Promise<BigNumber>;

    ROOT4146650865(overrides?: CallOverrides): Promise<BigNumber>;

    auction(
      vaultId: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctioneerReward(overrides?: CallOverrides): Promise<BigNumber>;

    auctions(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    calcPayout(
      vaultId: BytesLike,
      to: string,
      maxArtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancel(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    cauldron(overrides?: CallOverrides): Promise<BigNumber>;

    clear(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ladle(overrides?: CallOverrides): Promise<BigNumber>;

    limits(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lines(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payBase(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxBaseIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payFYToken(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxArtIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    point(
      param: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protected(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAuctioneerReward(
      auctioneerReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLineAndLimit(
      ilkId: BytesLike,
      baseId: BytesLike,
      duration: BigNumberish,
      vaultProportion: BigNumberish,
      collateralProportion: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtected(
      owner: string,
      _protected: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK8605463013(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_PERCENT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ROOT4146650865(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auction(
      vaultId: BytesLike,
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctioneerReward(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctions(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcPayout(
      vaultId: BytesLike,
      to: string,
      maxArtIn: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancel(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    cauldron(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clear(
      vaultId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    grantRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: BytesLike,
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ladle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    limits(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lines(
      arg0: BytesLike,
      arg1: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockRole(
      role: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payBase(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxBaseIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payFYToken(
      vaultId: BytesLike,
      to: string,
      minInkOut: BigNumberish,
      maxArtIn: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    point(
      param: BytesLike,
      value: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protected(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      roles: BytesLike[],
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAuctioneerReward(
      auctioneerReward_: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLineAndLimit(
      ilkId: BytesLike,
      baseId: BytesLike,
      duration: BigNumberish,
      vaultProportion: BigNumberish,
      collateralProportion: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtected(
      owner: string,
      _protected: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setRoleAdmin(
      role: BytesLike,
      adminRole: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
