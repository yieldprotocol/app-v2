/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import { TypedEventFilter, TypedEvent, TypedListener } from './commons';

interface IPoolInterface extends ethers.utils.Interface {
  functions: {
    'allowance(address,address)': FunctionFragment;
    'approve(address,uint256)': FunctionFragment;
    'balanceOf(address)': FunctionFragment;
    'base()': FunctionFragment;
    'burn(address,uint256,uint256)': FunctionFragment;
    'burnForBase(address,uint256)': FunctionFragment;
    'buyBase(address,uint128,uint128)': FunctionFragment;
    'buyBasePreview(uint128)': FunctionFragment;
    'buyFYToken(address,uint128,uint128)': FunctionFragment;
    'buyFYTokenPreview(uint128)': FunctionFragment;
    'fyToken()': FunctionFragment;
    'getBaseBalance()': FunctionFragment;
    'getFYTokenBalance()': FunctionFragment;
    'maturity()': FunctionFragment;
    'mint(address,bool,uint256)': FunctionFragment;
    'mintWithBase(address,uint256,uint256)': FunctionFragment;
    'nonces(address)': FunctionFragment;
    'permit(address,address,uint256,uint256,uint8,bytes32,bytes32)': FunctionFragment;
    'retrieveBase(address)': FunctionFragment;
    'retrieveFYToken(address)': FunctionFragment;
    'sellBase(address,uint128)': FunctionFragment;
    'sellBasePreview(uint128)': FunctionFragment;
    'sellFYToken(address,uint128)': FunctionFragment;
    'sellFYTokenPreview(uint128)': FunctionFragment;
    'totalSupply()': FunctionFragment;
    'transfer(address,uint256)': FunctionFragment;
    'transferFrom(address,address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'allowance', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'approve', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'balanceOf', values: [string]): string;
  encodeFunctionData(functionFragment: 'base', values?: undefined): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'burnForBase', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'buyBase', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'buyBasePreview', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'buyFYToken', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'buyFYTokenPreview', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'fyToken', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getBaseBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getFYTokenBalance', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maturity', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mint', values: [string, boolean, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'mintWithBase', values: [string, BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'nonces', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'permit',
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: 'retrieveBase', values: [string]): string;
  encodeFunctionData(functionFragment: 'retrieveFYToken', values: [string]): string;
  encodeFunctionData(functionFragment: 'sellBase', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sellBasePreview', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sellFYToken', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'sellFYTokenPreview', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'totalSupply', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transfer', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferFrom', values: [string, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'allowance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'approve', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'balanceOf', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'base', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnForBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyBasePreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'buyFYTokenPreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'fyToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getBaseBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getFYTokenBalance', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maturity', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mintWithBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'permit', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieveBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retrieveFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellBase', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellBasePreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellFYToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sellFYTokenPreview', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'totalSupply', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferFrom', data: BytesLike): Result;

  events: {
    'Approval(address,address,uint256)': EventFragment;
    'Transfer(address,address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'Approval'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Transfer'): EventFragment;
}

export class IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPoolInterface;

  functions: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    base(overrides?: CallOverrides): Promise<[string]>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnForBase(
      to: string,
      minBaseOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyBasePreview(baseOut: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyFYTokenPreview(fyTokenOut: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    fyToken(overrides?: CallOverrides): Promise<[string]>;

    getBaseBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    maturity(overrides?: CallOverrides): Promise<[number]>;

    mint(
      to: string,
      calculateFromBase: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintWithBase(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retrieveBase(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellBasePreview(baseIn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sellFYTokenPreview(fyTokenIn: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  base(overrides?: CallOverrides): Promise<string>;

  burn(
    to: string,
    minBaseOut: BigNumberish,
    minFYTokenOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnForBase(
    to: string,
    minBaseOut: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBase(
    to: string,
    baseOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyBasePreview(baseOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  buyFYToken(
    to: string,
    fyTokenOut: BigNumberish,
    max: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyFYTokenPreview(fyTokenOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  fyToken(overrides?: CallOverrides): Promise<string>;

  getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

  maturity(overrides?: CallOverrides): Promise<number>;

  mint(
    to: string,
    calculateFromBase: boolean,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintWithBase(
    to: string,
    fyTokenToBuy: BigNumberish,
    minTokensMinted: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retrieveBase(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  retrieveFYToken(
    to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBase(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellBasePreview(baseIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  sellFYToken(
    to: string,
    min: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sellFYTokenPreview(fyTokenIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(spender: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<string>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    burnForBase(to: string, minBaseOut: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

    buyBase(to: string, baseOut: BigNumberish, max: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyBasePreview(baseOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyFYToken(to: string, fyTokenOut: BigNumberish, max: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyFYTokenPreview(fyTokenOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<string>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<number>;

    mint(
      to: string,
      calculateFromBase: boolean,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    mintWithBase(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    retrieveBase(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    retrieveFYToken(to: string, overrides?: CallOverrides): Promise<BigNumber>;

    sellBase(to: string, min: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sellBasePreview(baseIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sellFYToken(to: string, min: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sellFYTokenPreview(fyTokenIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    transferFrom(sender: string, recipient: string, amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<[string, string, BigNumber], { owner: string; spender: string; value: BigNumber }>;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<[string, string, BigNumber], { from: string; to: string; value: BigNumber }>;
  };

  estimateGas: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    base(overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnForBase(
      to: string,
      minBaseOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyBasePreview(baseOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyFYTokenPreview(fyTokenOut: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    fyToken(overrides?: CallOverrides): Promise<BigNumber>;

    getBaseBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<BigNumber>;

    maturity(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      to: string,
      calculateFromBase: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintWithBase(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retrieveBase(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    retrieveFYToken(to: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellBasePreview(baseIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sellFYTokenPreview(fyTokenIn: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(owner: string, spender: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    base(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    burn(
      to: string,
      minBaseOut: BigNumberish,
      minFYTokenOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnForBase(
      to: string,
      minBaseOut: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBase(
      to: string,
      baseOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyBasePreview(baseOut: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyFYToken(
      to: string,
      fyTokenOut: BigNumberish,
      max: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyFYTokenPreview(fyTokenOut: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBaseBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFYTokenBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maturity(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      to: string,
      calculateFromBase: boolean,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintWithBase(
      to: string,
      fyTokenToBuy: BigNumberish,
      minTokensMinted: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nonces(owner: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveBase(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retrieveFYToken(
      to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBase(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellBasePreview(baseIn: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellFYToken(
      to: string,
      min: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sellFYTokenPreview(fyTokenIn: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
